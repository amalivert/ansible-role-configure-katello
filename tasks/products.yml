---
- name: enable rhel product repository sets
  katello_repository_set:
    username: "{{ satellite_admin_user }}"
    password: "{{ satellite_user_pass }}"
    server_url: "{{ satellite_url }}"
    verify_ssl: "{{ satellite_verify_ssl }}"
    organization: "{{ orgs.0.name }}"
    label: "{{ item.label }}"
    repositories: "{{ item.repositories }}"
    state: "{{ item.state }}"
  loop: "{{ lookup('vars', orgs.1 + '_product' | default([])) }}"
  loop_control:
    label: "{{ item.label }}"
  when: lookup('vars', orgs.1 + '_product')
  register: enable_repo_results
  tags: [katello,products]

#TODO: when state does not stop it from processing a product that does not exist
#      add a task that validates that the products the user is requesting does exist
#      if a product does not exist fail the play and ask user to fix. Or run the play, then
#      informed the user that the products where skipped because they do not exist.

- name: create/update Content Views
  katello_content_view:
    username: "{{ satellite_admin_user }}"
    password: "{{ satellite_user_pass }}"
    server_url: "{{ satellite_url }}"
    verify_ssl: "{{ satellite_verify_ssl }}"
    name: "{{ item.name }}"
    organization: "{{ orgs.0.name }}"
    repositories: "{{ item.repos | default(omit) }}"
    state: "{{ item.state | default(omit) }}"
  loop: "{{ lookup('vars', orgs.1 + '_cv' | default([])) }}"
  loop_control:
    label: "{{ item.name }}"
  when: lookup('vars', orgs.1 + '_cv')
  register: created_content_view
  tags: [katello,cv]

- name: publish content view to library
  katello_content_view_version:
    username: "{{ satellite_admin_user }}"
    password: "{{ satellite_user_pass }}"
    server_url: "{{ satellite_url }}"
    verify_ssl: "{{ satellite_verify_ssl }}"
    content_view: "{{ item.name }}"
    organization: "{{ orgs.0.name }}"
    version: "{{ cv_default_ver }}"
    lifecycle_environments:
      - "{{ cv_default_lc }}"
  loop: "{{ lookup('vars', orgs.1 + '_cv' | default([])) }}"
  loop_control:
    label: "{{ item.name }}"
  when: lookup('vars', orgs.1 + '_cv')
  tags: [katello,cv,promote]

- name: "ensure version one of the content view is in all specified lifecyle environments"
  katello_content_view_version:
    username: "{{ satellite_admin_user }}"
    password: "{{ satellite_user_pass }}"
    server_url: "{{ satellite_url }}"
    verify_ssl: "{{ satellite_verify_ssl }}"
    content_view: "{{ item.name }}"
    organization: "{{ orgs.0.name }}"
    version: "{{ cv_default_ver }}"
    lifecycle_environments: "{{ orgs.0.lifecycle_environments }}"
  loop: "{{ lookup('vars', orgs.1 + '_cv' | default([])) }}"
  loop_control:
    label: "{{ item.name }}"
  when: lookup('vars', orgs.1 + '_cv')
  tags: [katello,cv,promote]

#TODO:
# Let user specefiy which lifecycle environemtns they want to have activation keys for
# Default should be to create AK for all LC
- name: create/update Activation Keys
  katello_activation_key:
    username: "{{ satellite_admin_user }}"
    password: "{{ satellite_user_pass }}"
    server_url: "{{ satellite_url }}"
    verify_ssl: "{{ satellite_verify_ssl }}"
    name: "{{ item.name }}"
    organization: "{{ orgs.0.name }}"
    lifecycle_environment: "{{ item.lifecycle_environment }}"
    content_view: "{{ item.content_view }}"
    subscriptions: "{{ item.subscriptions }}"
    auto_attach: "{{ item.auto_attach | default(omit) }}"
  loop: "{{ lookup('vars', orgs.1 + '_ak' | default([])) }}"
  loop_control:
    label: "{{ item.name }}"
  when: lookup('vars', orgs.1 + '_ak')
  tags: [katello,cv,promote,ak]
